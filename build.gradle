// ForgeGradle build script for 1.7.10
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2.3'
        classpath 'de.undercouch:gradle-download-task:4.1.2'
    }
}

apply plugin: 'forge'
apply plugin: 'maven-publish'
apply plugin: 'de.undercouch.download'

// Project information
version = "1.0"
group = "com.tacz.guns" // Change this to your mod's package
archivesBaseName = "TACZ-1.7.10"

// Forge version
ext.forge_version = "1.7.10-10.13.4.1614-1.7.10"

// Java version configuration
sourceCompatibility = targetCompatibility = '1.8'

// Repositories for dependencies
repositories {
    mavenCentral()
    maven {
        name = 'Forge'
        url = 'https://maven.minecraftforge.net/'
    }
    maven {
        name = 'ChickenBones'
        url = 'https://chickenbones.net/maven/'
    }
    // Legacy Maven for older Forge versions
    maven {
        name = 'LegacyForge'
        url = 'https://maven.cil.li/'
    }
    // Forge Maven (legacy)
    maven {
        name = 'ForgeLegacy'
        url = 'https://files.minecraftforge.net/maven/'
    }
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"
    
    // MCP mappings version (stable_12 is recommended for 1.7.10)
    mappings = "stable_12"
    
    // Make sure we're using the correct Forge version
    replaceIn "GunMod1710.java"
    replace "@VERSION@", project.version
    
    // Add custom repositories for Minecraft client download
    repositories {
        maven {
            name = 'minecraft'
            url = 'https://libraries.minecraft.net/'
        }
        maven {
            name = 'forge'
            url = 'https://maven.minecraftforge.net/'
        }
    }
}

// Configure Minecraft
minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"
    
    // MCP mappings version (stable_12 is recommended for 1.7.10)
    mappings = "stable_12"
    
    // Make sure we're using the correct Forge version
    replaceIn "GunMod1710.java"
    replace "@VERSION@", project.version
    
    // Add the main Forge Maven repository
    repositories {
        maven {
            name = 'Forge'
            url = 'https://maven.minecraftforge.net/'
        }
    }
    
    // Core mod is specified in the @Mod annotation in the main mod class
}

// Disable download tasks and create stubs
project.afterEvaluate {
    // Disable all download tasks
    tasks.each { task ->
        if (task.name.startsWith('download')) {
            task.enabled = false
            task.onlyIf { false }
        }
    }
}

// Configure ForgeGradle
minecraft {
    srgExtra "PK: . minecraft"
    
    // Disable version JSON download
    tasks.whenTaskAdded { task ->
        if (task.name == 'getVersionJson') {
            task.enabled = false
            task.onlyIf { false }
        }
    }
}

task checkFiles {
    doLast {
        // Define the default Gradle cache location
        def gradleCache = file("${gradle.gradleUserHomeDir}/caches")
        
        // Check for required files in the default cache
        def requiredFiles = [
            [file: file("${gradleCache}/minecraft/net/minecraft/minecraft/1.7.10/minecraft-1.7.10.jar"), 
                url: 'https://launcher.mojang.com/mc/game/1.7.10/client/952438ac4e01b4d115c5fc38f891710c4941df29/client.jar'],
            [file: file("${gradleCache}/minecraft/net/minecraft/minecraft/1.7.10/1.7.10.json"),
                url: 'https://launchermeta.mojang.com/v1/packages/2e818f69956f3d7cd884261c397976783abb0401/1.7.10.json']
        ]
        
        requiredFiles.each { req ->
            if (!req.file.exists()) {
                throw new GradleException("""
                    Required file not found: ${req.file}
                    Please download it from: ${req.url}
                    And place it at: ${req.file.absolutePath}
                    """.stripIndent())
            } else {
                logger.lifecycle("Found required file: ${req.file}")
            }
        }
    }
}

// Make setup tasks depend on our file check
tasks.setupDecompWorkspace.dependsOn checkFiles
tasks.setupDevWorkspace.dependsOn checkFiles

// Disable all download tasks in all configurations
configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if (details.requested.group == 'net.minecraft' && details.requested.name == 'minecraft') {
                details.useVersion '1.7.10'
            }
        }
    }
}

// Configure Java compilation
allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.fork = true
        options.forkOptions.executable = 'javac'
        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-Xdiags:verbose' << '-Xmaxerrs' << '1000'
        
        // Force Java 8 compatibility
        options.compilerArgs << '-source' << '1.8' << '-target' << '1.8'
    }
    
    // Force all projects to use Java 8
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

// Disable JavaDoc for now as it's causing issues
tasks.withType(Javadoc) {
    enabled = false
}

// Set Java home to JDK 8 if available
if (System.getenv('JAVA_HOME_8')) {
    tasks.withType(JavaCompile) {
        options.forkOptions.javaHome = file(System.getenv('JAVA_HOME_8'))
    }
}

// Ensure the encoding matches for all tasks
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Process resources
processResources {
    // This ensures this task is redone when the versions change
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // Replace properties in mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        
        // Replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    
    // Copy everything else except mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Consolidated repositories section
repositories {
    // Primary repositories
    mavenCentral()
    
    // Forge Maven (primary)
    maven {
        name = 'Forge'
        url = 'https://maven.minecraftforge.net/'
    }
    
    // Legacy Forge Maven
    maven {
        name = 'ForgeLegacy'
        url = 'https://files.minecraftforge.net/maven/'
    }
    
    // ChickenBones Maven (for NEI, etc.)
    maven {
        name = 'ChickenBones'
        url = 'https://chickenbones.net/maven/'
    }
    
    // Legacy Maven for older Forge versions
    maven {
        name = 'LegacyForge'
        url = 'https://maven.cil.li/'
    }
    
    // Aliyun mirror for Chinese developers
    maven { 
        name = 'Aliyun'
        url = 'https://maven.aliyun.com/repository/public/'
    }
    
    // Jared's maven for JEI and other mods
    maven {
        name = 'Jared'
        url = 'https://maven.blamejared.com/'
    }
    
    // CleanroomMC Maven (for Mixin)
    maven {
        name = 'CleanroomMC'
        url = 'https://maven.cleanroommc.com/'
    }
    
    // Minecraft Maven (for libraries)
    maven {
        name = 'Minecraft'
        url = 'https://libraries.minecraft.net/'
    }
}

// Dependencies
dependencies {
    // Forge dependency
    compileOnly "net.minecraftforge:forge:1.7.10-10.13.4.1614-1.7.10:universal@jar"
    
    // Core dependencies
    compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
    compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
    
    // Add other dependencies here
    // compile "group:name:version:classifier"
    
    // Testing
    // testCompile "junit:junit:4.12"
    
    // Configure dependency resolution
    // Add required dependencies
    compile 'org.apache.logging.log4j:log4j-api:2.0-beta9'
    compile 'org.apache.logging.log4j:log4j-core:2.0-beta9'
    
    configurations.all {
        resolutionStrategy {
            // Cache dynamic versions for 10 minutes
            cacheDynamicVersionsFor 10, 'minutes'
            // Cache changing modules for 10 minutes
            cacheChangingModulesFor 10, 'minutes'
            
            // Force specific versions to resolve conflicts
            force 'org.scala-lang:scala-library:2.11.1'
            force 'org.scala-lang.plugins:scala-continuations-library_2.11:1.0.2'
            force 'commons-codec:commons-codec:1.9'
            force 'org.lwjgl.lwjgl:lwjgl:2.9.1'
            force 'org.apache.logging.log4j:log4j-api:2.0-beta9'
            force 'org.apache.logging.log4j:log4j-core:2.0-beta9'
            
            // Fail on version conflict
            failOnVersionConflict()
        }
    }
}

// Configure JAR manifest
jar {
    manifest {
        attributes 'FMLCorePlugin': '${project.modGroup}.core.TACZCore'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes 'ForceLoadAsMod': 'true'
        
        // Add other manifest attributes if needed
        attributes 'FMLAT': 'tacz_at.cfg'
    }
    
    // Include all dependencies in the JAR
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    
    // Exclude META-INF files to avoid conflicts
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

// Source JAR configuration is now at the end of the file

// Configure deobfuscated JAR
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Configure publishing (simplified for Forge 1.7.10)
if (System.getenv('PUBLISH_MAVEN') != null) {
    apply plugin: 'maven'
    
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : "${System.getProperty('user.home')}/.m2/repository"))
                
                pom {
                    groupId = project.group
                    artifactId = project.archivesBaseName
                    version = project.version
                }
            }
        }
    }
    
    // Sources JAR is defined at the end of the file
    
    artifacts {
        archives sourcesJar
        archives deobfJar
    }
}

// Process resources and expand variables in mcmod.info
processResources {
    // This ensures this task is redone when the versions change
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    // Exclude the .cache directory
    exclude '.cache'
    
    // Replace properties in mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        
        // Replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    
    // Copy everything else except mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info', '**/thumbs.db'
    }
    
    // Move resources to appropriate location
    rename '(.+_at\\.cfg)', 'META-INF/$1'
}

// Create source JAR

// Configure JAR manifest
jar {
    manifest {
        attributes(
            'FMLCorePlugin': 'com.tacz.guns.asm.LoadingPlugin',
            'FMLCorePluginContainsFMLMod': 'true',
            'ForceLoadAsMod': 'true',
            'FMLAT': 'tacz_at.cfg',
            'ModSide': 'BOTH',
            'ModVersion': project.version,
            'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}"
        )
    }
    
    // Include all dependencies in the JAR
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

// Create a deobfuscated JAR
// Make sure the deobf jar is built when the build task is run
build.dependsOn deobfJar

// Create sources JAR task
// 编译源码文件，方便发布 maven
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// Add the deobf jar and sources jar to the artifacts
artifacts {
    archives deobfJar
    archives sourcesJar
}

// Configure runClient task
runClient {
    // Set JVM arguments
    jvmArgs = [
        '-Xmx2G',
        '-Xms1G',
        '-XX:PermSize=256m',
        '--tweakClass', 'net.minecraftforge.fml.common.launcher.FMLTweaker',
        '-Dfml.ignoreInvalidMinecraftCertificates=true',
        '-Dfml.coreMods.load=com.tacz.guns.asm.LoadingPlugin',
        '-Dfml.earlyprogresswindow=false',
        '-Dfml.ignorePatchDiscrepancies=true',
        '-Djava.net.preferIPv4Stack=true'
    ]
    
    // Set working directory
    workingDir = 'run/client'

    // Set working directory
    workingDir = 'run/client'

    // Enable assertions
    enableAssertions = true

    // Set system properties
    systemProperty 'fml.coreMods.load', 'com.tacz.guns.asm.LoadingPlugin'
    systemProperty 'forge.logging.console.level', 'debug'

    // Enable logging
    standardOutput = System.out
    errorOutput = System.err
}

// Configure runServer task
runServer {
    // Set JVM arguments
    jvmArgs '-Xmx2G', '-Xms1G', '-XX:PermSize=256m',
            '-Dfml.ignoreInvalidMinecraftCertificates=true',
            '-Dfml.coreMods.load=com.tacz.guns.asm.LoadingPlugin',
            '-Djava.net.preferIPv4Stack=true'

    // Set working directory
    workingDir = 'run/server'

    // Enable assertions
    enableAssertions = true

    // Set system properties
    systemProperty 'fml.coreMods.load', 'com.tacz.guns.asm.LoadingPlugin'
    systemProperty 'forge.logging.console.level', 'debug'

    // Enable logging
    standardOutput = System.out
    errorOutput = System.err
}

// Add generated resources to the main source set
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    // Aliyun mirror for Chinese developers
    maven { url "https://maven.aliyun.com/repository/public/" }
    
    // Jared's maven for JEI and other mods
    maven { 
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    
    // Mod Maven mirror
    maven {
        name = "Mod Maven"
        url = "https://modmaven.k-4u.nl"
    }
    
    // CurseMaven for mods
    maven { url "https://cursemaven.com" }
    maven { url "https://maven.shedaniel.me/" } // cloth config api
    maven { url "https://dvs1.progwml6.com/files/maven/" }
    maven { url "https://modmaven.dev" }
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    // Shedaniel's maven (Architectury API)
    maven { url = "https://maven.architectury.dev" }
    
    // latvian.dev Maven (KubeJS and Rhino)
    maven { url "https://maven.latvian.dev/releases" }
    // JitPack repository for various libraries
    maven { url 'https://jitpack.io' }
    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }
    mavenCentral() // MixinExtras is there
    mavenLocal()
    flatDir {
        dir 'libs'
    }
}

dependencies {
    // Forge dependency for 1.7.10
    compile 'net.minecraftforge:forge:1.7.10-10.13.4.1614-1.7.10:universal@jar'
    
    // Apache Commons Math 库，用于进行一些插值运算
    compile 'org.apache.commons:commons-math3:3.6.1'

    // LuaJ 库，将 lua 脚本语言引入用于控制枪械的逻辑和动画状态机
    compile('com.github.FiguraMC.luaj:luaj-core:3.0.8-figura') {
        exclude group: 'org.apache.commons', module: 'commons-lang3'
    }
    compile('com.github.FiguraMC.luaj:luaj-jse:3.0.8-figura') {
        exclude group: 'org.apache.commons', module: 'commons-lang3'
    }
    compile('org.apache.bcel:bcel:6.6.1') {
        exclude group: 'org.apache.commons', module: 'commons-lang3'
    }
}

jar {
    // 打包时，给 manifest 文件写入一些有用信息
    // 这些信息会被游戏调用，从而显示成模组的名称和版本信息
    manifest {
        attributes([
                "Implementation-Title"  : project.name,
                "Implementation-Version": project.version
        ])
    }
}

// Configure Java compilation
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
